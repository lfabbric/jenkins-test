// try {
//   library(
//     identifier: 'jsl-jenkins-shared-library-local@release/20210415',
//     retriever: modernSCM(
//       [
//         $class: 'GitSCMSource',
//         remote: "/app/jenkins/git/jsl-jenkins-shared-library.git",
//         extensions: [[$class: 'WipeWorkspace']]
//       ]
//     )
//   ) _
// } catch (Exception Ex) {
//   library(
//     identifier: 'jsl-jenkins-shared-library@release/20210415',
//     retriever: modernSCM(
//       [
//         $class: 'GitSCMSource',
//         remote: "git@github.com:CenturyLink/jsl-jenkins-shared-library.git",
//         credentialsId: 'SCMAUTO_SSH_DEVOPS_PIPELINE',
//         extensions: [[$class: 'WipeWorkspace']]
//       ]
//     )
//   ) _
// }
def matrixSetup = [:]

pipeline {
  environment {
    GITHUB_TOKEN_CREDENTIALS = ''
    GITHUB_SSH_CREDENTIALS = ''
    DOCKER_CREDENTIALS = ''
    KUBE_CREDENTIALS = 'OMGMEAT_KUBERNETES_CRED'
    KUBE_CREDENTIALS_TEST = ''
    AMAZON_CREDENTIALS = ''
    SONARQUBE_CREDENTIALS = ''
    QUALITY_GATE_CREDENTIALS = ''
    GCP_CREDENTIALS = ''
    JIRA_CREDENTIALS = ''
    MSTEAMS_CREDENTIALS = ''

    // Custom project variables
    BRANCH_NAME = GIT_BRANCH.split('/')[-1].trim().toLowerCase()
    COMMIT_ID = GIT_COMMIT.substring(0,7).trim().toLowerCase()
    PULL_REQUEST="pr-${env.CHANGE_ID}"
    PROJECT_NAME = 'PROJECT'
    DOCKER_REPO ='PROJECT_REPO'
    IMAGE_NAME = "${env.PROJECT_NAME}"
    IMAGE_TAG =  "${env.PULL_REQUEST}"
    KUBE_DOCKER_SECRET_NAME = "${env.PROJECT_NAME}-${env.PULL_REQUEST}"
    KUBE_DOCKER_SECRET_NAME_TEST = "${env.PROJECT_NAME}-${env.BRANCH_NAME}"
  }

    /*parameters {
      //      https://www.jenkins.io/doc/book/pipeline/syntax/#parameters

    }*/
    parameters {
        booleanParam(name: "buildDockerContainers", defaultValue: false)
        choice(name: 'DOCKERNAME_FILTER', choices: ['all', 'SMX', 'LOGIN', 'GUI'], description: 'Build specific containers')
    }

    /*
    https://www.jenkins.io/doc/book/pipeline/syntax/#agent
    Add agent sections in stages/stage if needed.
    */
    // agent {
    //   label 'Docker-enabled'
    // }
    agent any

    options {
      timestamps ()
      timeout(time: 1, unit: 'HOURS')
      buildDiscarder(logRotator(numToKeepStr:'10', daysToKeepStr: '30'))
      disableConcurrentBuilds()
    }

    /*
    https://www.jenkins.io/doc/book/pipeline/syntax/#triggers
    */
    // triggers {
    //   pollSCM('*/5 * * * *')
    //   // echo 'issueCommentTrigger(.*test this please.*)'
    // }

    stages {

      stage('Static Code Analysis') {
        parallel {
          stage('Linting') {
            // agent {
            //   dockerfile {
            //     /* Insert your code here */  
            //   }
            // }
            steps {
              script{
                /* Insert your code here */  
                echo 'Linting'
                sh 'printenv'
                sh 'ls -la'
              }
            }
          }
          stage('DevSecOps'){
            steps {
              script {
                /* Contract Validation Gate */
                echo 'jslGitHubSecurityAlert()'
              }
            }
          }
        }
      }

      stage('App Pipeline') {
        matrix {
          axes {
            axis {
              name 'PROJECT'
              values 'SMX', 'GUI'
            }
            axis {
              name 'APP'
              values 'OMGMEAT_GUI', 'OMGREPORTS_GUI', 'OMG_SHARED', 'OMGMEAT_SMX'
            }
          }
          excludes {
            exclude {
              axis {
                name 'PROJECT'
                values 'SMX'
              }
              axis {
                name 'APP'
                values 'OMGMEAT_GUI', 'OMGREPORTS_GUI'
              }
            }
            exclude {
              axis {
                name 'PROJECT'
                values 'GUI'
              }
              axis {
                name 'APP'
                values 'OMG_SHARED', 'OMGMEAT_SMX'
              }
            }
          }
          stages {
            stage("Build"){
              agent {
                dockerfile {
                  filename 'Dockerfile'
                  dir 'cicd/docker/mvn'
                  label 'Docker-enabled'
                }
              }
              steps {
                script {
                  dir ("${PROJECT}/${APP}") {
                    // jslMavenWrapper('-s ./settings.xml -X clean install')
                    sh 'mvn clean install'
                  }
                }
                echo "Build ${PROJECT} ${APP} Docker Container"
              }
            }
            stage("Test"){
              steps {
                echo "Build ${PROJECT} ${APP} Docker Container"
              }
            }
            stage("Upload"){
              steps {
                echo "Build ${PROJECT} ${APP} Docker Container"
              }
            }
          }
        }
      }

      stage('Build Docker Images') {
        when {
          expression { params.buildDockerContainers }
        }
        matrix {
          when { anyOf {
            expression { params.DOCKERNAME_FILTER == 'all' }
            expression { params.DOCKERNAME_FILTER == env.DOCKERNAME }
          }}
          axes {
            axis {
              name 'DOCKERNAME'
              values 'SMX', 'LOGIN', 'GUI'
            }
          }
          stages {
            stage("Build"){
              steps {
                script {
                  dir ('dockerfiles/${DOCKERNAME}') {
                    // jslDirectBuildAndPushToNexus('Dockerfile', env.IMAGE_TAG, 'server', 'soar/threatnix')
                    sh 'pwd'
                  }
                  matrixSetup.put("${DOCKERNAME}", "TEST_SET_${DOCKERNAME}")
                  def container = docker.build("test-image", "./dockerfiles/${DOCKERNAME}")
                  matrixSetup.put("${DOCKERNAME}_container", container)
                }
              }
            }
            stage("Test"){
              steps {
                script {
                  def container = matrixSetup.get("${DOCKERNAME}_container")
                  container.inside {
                    sh 'echo "Tests passed"'
                  }
                  sh 'docker ps -a'
                }
                echo "Testing ${DOCKERNAME} Docker Container"
                echo "MatrixSetup Variable: " + matrixSetup.get("${DOCKERNAME}")
              }
            }
            stage("Deploy"){
              steps {
                echo "Deploying ${DOCKERNAME} Docker Container"
                echo "MatrixSetup Variable: " + matrixSetup.get("${DOCKERNAME}")
              }
            }
          }
        }
      }

      stage('Kubernetes') {
        matrix {
          when { anyOf {
            expression { params.DOCKERNAME_FILTER == 'all' }
            expression { params.DOCKERNAME_FILTER == env.DOCKERNAME }
          }}
          axes {
            axis {
              name 'KUBERNETESNAME'
              values 'SMX', 'LOGIN', 'GUI'
            }
          }
          stages {
            stage("Deploy"){
              steps {
                script {
                  dir ('dockerfiles/${KUBERNETESNAME}') {
                    sh 'pwd'
                    // going to use mainifest.yaml
                    // jslDeployK8s(my_manifest)
                  }
                }
                echo "Deploy ${KUBERNETESNAME} Kubernetes"
              }
            }
          }
        }
      }

    }

    post {
      success {
        /* Contract Validation Gate */
        echo 'jslNotification(success)'
        echo 'cleanWs()'
      }
      failure {
        /* Contract Validation Gate */
        echo 'jslNotification(failure)'
        echo 'cleanWs()'
      }
      always {
        echo 'cleanWs()'
      }
    }
}


// pipeline {
//     agent any 
//     stages {
//         stage('Stage 1') {
//             steps {
//                 echo 'Hello world!' 
//                 echo env.BRANCH_NAME
//                 script {
//                     if (env.BRANCH_NAME == 'main') {
//                         echo 'I only execute on the master branch'
//                     } else {
//                         echo 'I execute elsewhere'
//                     }
//                 }
//             }
//         }
//         stage('Meh Another stage') {
//             steps {
//                 echo 'Another step'
//             }
//         }
//         stage('Maven step') {
//             // agent { docker 'maven:3.8.1-adoptopenjdk-11' }
//             steps {
//                 echo 'Hello Maven'
//                 // sh 'mvn --version'
//             }
//         }
//         stage("One"){
//             steps {
//                 sleep 10
//                 echo 'hello'
//             }
//         }
        
//     }
// }
